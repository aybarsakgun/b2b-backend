# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SalesRepresentative {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: Float!
  name: String
  phone: String
  email: String
  users: [User!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserBranch {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: Float!
  name: String!
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  username: String!
  email: String!
  currency: String!
  name: String!
  customerId: Float!
  role: UserRole!
  isActive: Boolean!
  branches: [UserBranch!]!
  salesRepresentative: SalesRepresentative
  priceOrder: Float
  branch: Float
}

enum UserRole {
  ADMIN
  USER
}

type LoginResult {
  token: String!
  user: User!
}

type UserPaginatedResult {
  total: Int
  totalPage: Int
  page: Int
  limit: Int
  items: [User!]!
}

type ProductPrice {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  value: String!
  currency: String!
  priceOrder: Float!
}

type ProductUnit {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  value: String!
  barcode: String
  defaultPriceOrder: Float!
  listPriceOrder: Float!
  multiplier: Float!
  length: Float
  width: Float
  height: Float
  weight: Float
  prices: [ProductPrice!]!
  defaultPrice: String
  listPrice: String
}

type Warehouse {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  quantity: String!
  warehouseId: Float!
  date: String!
  warehouseName: String!
}

type Brand {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  code: String!
  models: [Model!]!
  productCount: Float
}

type Model {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  brand: Brand
  productCount: Float
}

type Category {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  description: String!
  metaTitle: String!
  metaDescription: String!
  metaKeyword: String!
  seo: String!
  order: Float
  parent: Category
  children: [Category!]!
  productCount: Float
}

type Product {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  code: String!
  equivalentCode: String!
  name: String!
  metaDescription: String!
  metaTitle: String!
  metaKeywords: String!
  description: String!
  seo: String!
  defaultUnit: String!
  quantity: Float!
  taxRate: Float!
  image: String!
  parent: Product!
  children: [Product!]!
  units: [ProductUnit!]!
  warehouses: [Warehouse!]!
  categories: [Category!]!
  model: Model
  brand: Brand
  currency: String!
}

type Setting {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  key: String!
  value: String
}

type Currency {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  code: String!
  name: String!
  symbol: String!
  exchangeRate: String!
}

type ProductPaginatedResult {
  total: Int
  totalPage: Int
  page: Int
  limit: Int
  items: [Product!]!
}

type Cart {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  id: ID!
  quantity: Float!
  product: Product!
  user: User!
  productUnit: ProductUnit!
}

type Query {
  user(id: ID!): User!
  currentUser: User!
  users(pagination: PaginationInput): UserPaginatedResult!
  product(id: ID!): Product!
  products(filters: CatalogFiltersInput, pagination: PaginationInput): ProductPaginatedResult!
  brands(filters: CatalogFiltersInput): [Brand!]!
  categories(filters: CatalogFiltersInput): [Category!]!
  models(filters: CatalogFiltersInput): [Model!]!
  currencies: [Currency!]!
  settings: [Setting!]!
  cart: [Cart!]!
}

input PaginationInput {
  page: Int = 1
  limit: Int = 10
}

input CatalogFiltersInput {
  brands: [ID!]
  models: [ID!]
  category: ID
  priceRange: PriceRangeInput
}

input PriceRangeInput {
  min: String
  max: String
  currency: String!
  vatIncluded: Boolean = false
}

type Mutation {
  login(data: LoginInput!): LoginResult!
  addItemToCart(data: AddItemToCartInput!): [Cart!]!
  removeItemFromCart(id: Int!): [Cart!]!
  removeAllItemsFromCart: [Cart!]!
}

input LoginInput {
  username: String!
  password: String!
}

input AddItemToCartInput {
  productId: Int!
  quantity: Int
}
